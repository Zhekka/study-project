{"ast":null,"code":"var _jsxFileName = \"/Users/zheka/Desktop/projects/react-1/src/components/Dialogs/DialogsContainer.jsx\";\nimport React from \"react\";\nimport Dialogs from \"./Dialogs\";\nimport { sendMessageCreator, updateNewMessageBodyCreator } from \"../../redux/dialogs-reducer\";\nimport StoreContext from \"../../StoreContext\";\nimport store from \"../../redux/redux-store\";\nimport { connect } from \"react-redux\";\n\nfunction DialogsContainer() {\n  return /*#__PURE__*/React.createElement(StoreContext.Consumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }, store => {\n    let state = store.getState();\n\n    let onNewMessageChange = body => {\n      store.dispatch(updateNewMessageBodyCreator(body));\n    };\n\n    let onSendMessageClick = () => {\n      store.dispatch(sendMessageCreator());\n    };\n\n    return /*#__PURE__*/React.createElement(Dialogs, {\n      updateNewMessageBody: onNewMessageChange,\n      sendMessage: onSendMessageClick,\n      messagePage: state.messagePage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 28\n      }\n    });\n  });\n}\n\nlet mapStateToProps = state => {\n  //данные\n  return {\n    messagePage: state.messagePage\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    updateNewMessageBody: () => {\n      dispatch(sendMessageCreator());\n    },\n    sendMessage: body => {\n      dispatch(updateNewMessageBodyCreator(body));\n    }\n  };\n};\n\nconst SuperDialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\nexport default DialogsContainer;","map":{"version":3,"sources":["/Users/zheka/Desktop/projects/react-1/src/components/Dialogs/DialogsContainer.jsx"],"names":["React","Dialogs","sendMessageCreator","updateNewMessageBodyCreator","StoreContext","store","connect","DialogsContainer","state","getState","onNewMessageChange","body","dispatch","onSendMessageClick","messagePage","mapStateToProps","mapDispatchToProps","updateNewMessageBody","sendMessage","SuperDialogsContainer"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,kBAAR,EAA4BC,2BAA5B,QAA8D,6BAA9D;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAEA,SAASC,gBAAT,GAA4B;AAGxB,sBACI,oBAAC,YAAD,CAAc,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAESF,KAAD,IAAW;AACP,QAAIG,KAAK,GAAGH,KAAK,CAACI,QAAN,EAAZ;;AAEA,QAAIC,kBAAkB,GAAIC,IAAD,IAAU;AAC/BN,MAAAA,KAAK,CAACO,QAAN,CAAeT,2BAA2B,CAACQ,IAAD,CAA1C;AACH,KAFD;;AAIA,QAAIE,kBAAkB,GAAG,MAAM;AAC3BR,MAAAA,KAAK,CAACO,QAAN,CAAeV,kBAAkB,EAAjC;AACH,KAFD;;AAGA,wBAAO,oBAAC,OAAD;AAAS,MAAA,oBAAoB,EAAEQ,kBAA/B;AACS,MAAA,WAAW,EAAEG,kBADtB;AAES,MAAA,WAAW,EAAEL,KAAK,CAACM,WAF5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAGH,GAfT,CADJ;AAoBH;;AAED,IAAIC,eAAe,GAAIP,KAAD,IAAW;AAAE;AAC/B,SAAO;AACHM,IAAAA,WAAW,EAAEN,KAAK,CAACM;AADhB,GAAP;AAGH,CAJD;;AAMA,IAAIE,kBAAkB,GAAIJ,QAAD,IAAc;AACnC,SAAO;AACHK,IAAAA,oBAAoB,EAAE,MAAI;AACtBL,MAAAA,QAAQ,CAACV,kBAAkB,EAAnB,CAAR;AAEH,KAJE;AAKHgB,IAAAA,WAAW,EAAEP,IAAD,IAAQ;AAChBC,MAAAA,QAAQ,CAACT,2BAA2B,CAACQ,IAAD,CAA5B,CAAR;AACH;AAPE,GAAP;AASH,CAVD;;AAaA,MAAMQ,qBAAqB,GAAGb,OAAO,CAACS,eAAD,EAAiBC,kBAAjB,CAAP,CAA4Cf,OAA5C,CAA9B;AAGA,eAAeM,gBAAf","sourcesContent":["import React from \"react\";\nimport Dialogs from \"./Dialogs\";\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reducer\";\nimport StoreContext from \"../../StoreContext\";\nimport store from \"../../redux/redux-store\";\nimport {connect} from \"react-redux\";\n\nfunction DialogsContainer() {\n\n\n    return (\n        <StoreContext.Consumer>\n            {\n                (store) => {\n                    let state = store.getState();\n\n                    let onNewMessageChange = (body) => {\n                        store.dispatch(updateNewMessageBodyCreator(body));\n                    }\n\n                    let onSendMessageClick = () => {\n                        store.dispatch(sendMessageCreator())\n                    }\n                    return <Dialogs updateNewMessageBody={onNewMessageChange}\n                                    sendMessage={onSendMessageClick}\n                                    messagePage={state.messagePage}/>\n                }\n            }\n\n        </StoreContext.Consumer>)\n}\n\nlet mapStateToProps = (state) => { //данные\n    return {\n        messagePage: state.messagePage\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        updateNewMessageBody: ()=>{\n            dispatch(sendMessageCreator())\n\n        },\n        sendMessage:(body)=>{\n            dispatch(updateNewMessageBodyCreator(body));\n        }\n    }\n}\n\n\nconst SuperDialogsContainer = connect(mapStateToProps,mapDispatchToProps)(Dialogs);\n\n\nexport default DialogsContainer"]},"metadata":{},"sourceType":"module"}