{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: []\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case TOGGLE_IS_FETCHING:\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USERS:\n      return { ...state,\n        users: action.users\n      };\n\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return { ...state,\n          totalUsersCount: action.totalUsersCount\n        };\n      }\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsersAC = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPageAC = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setUsersTotalCountAC = totalUsersCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  totalUsersCount\n});\nexport const setIsFetchingAC = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n});\nexport const getUsersThunkCreator = (currentPage, pageSize) => {\n  return dispatch => {\n    dispatch(setIsFetchingAC(true));\n    usersAPI.getUsers(currentPage, pageSize).then(data => {\n      dispatch(setIsFetchingAC(false));\n      dispatch(setUsersAC(data.items));\n      dispatch(setUsersTotalCountAC(data.totalCount));\n    });\n  };\n};\nexport const follow = userId => {\n  return dispatch => {\n    dispatch(toggleFollowingProgress(true, userId));\n    usersAPI.follow(userId).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(followSuccess(userId));\n      }\n\n      dispatch(toggleFollowingProgress(false, userId));\n    });\n  };\n};\nexport const unfollow = userId => {\n  return dispatch => {\n    dispatch(toggleFollowingProgress(true, userId));\n    usersAPI.unfollow(userId).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(unfollowSuccess(userId));\n      }\n\n      dispatch(toggleFollowingProgress(false, userId));\n    });\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["/Users/zheka/Desktop/projects/react-1/src/redux/users-reducer.js"],"names":["usersAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","map","u","id","userId","followed","filter","followSuccess","unfollowSuccess","setUsersAC","setCurrentPageAC","setUsersTotalCountAC","setIsFetchingAC","toggleFollowingProgress","getUsersThunkCreator","dispatch","getUsers","then","data","items","totalCount","follow","response","resultCode","unfollow"],"mappings":"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","sourcesContent":["import {usersAPI} from \"../api/api\";\n\nconst FOLLOW = 'FOLLOW'\nconst UNFOLLOW = 'UNFOLLOW'\nconst SET_USERS = 'SET_USERS'\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\n\nlet initialState = {\n    users: [],\n    pageSize: 5,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: []\n}\n\nconst usersReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case TOGGLE_IS_FETCHING: {\n            return {...state, isFetching: action.isFetching}\n        }\n        case SET_CURRENT_PAGE:\n            return {\n                ...state, currentPage: action.currentPage\n            }\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return {...u, followed: true}\n                    }\n                    return u\n                })\n            }\n\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return {...u, followed: false}\n                    }\n                    return u\n                })\n            }\n        case SET_USERS:\n            return {...state, users: action.users}\n        case SET_TOTAL_USERS_COUNT: {\n            return {...state, totalUsersCount: action.totalUsersCount}\n        }\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        }\n\n        default:\n            return state;\n    }\n}\n\nexport const followSuccess = (userId) => ({type: FOLLOW, userId})\nexport const unfollowSuccess = (userId) => ({type: UNFOLLOW, userId})\nexport const setUsersAC = (users) => ({type: SET_USERS, users})\nexport const setCurrentPageAC = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage})\nexport const setUsersTotalCountAC = (totalUsersCount) => ({type: SET_TOTAL_USERS_COUNT, totalUsersCount})\nexport const setIsFetchingAC = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching})\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\n    isFetching,\n    userId\n})\n\nexport const getUsersThunkCreator = (currentPage, pageSize) => {\n    return (dispatch) => {\n        dispatch(setIsFetchingAC(true))\n        usersAPI.getUsers(currentPage, pageSize)\n            .then(data => {\n                dispatch(setIsFetchingAC(false))\n                dispatch(setUsersAC(data.items))\n                dispatch(setUsersTotalCountAC(data.totalCount))\n            });\n    }\n}\n\nexport const follow = (userId) => {\n    return (dispatch) => {\n        dispatch(toggleFollowingProgress(true, userId));\n        usersAPI.follow(userId)\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    dispatch(followSuccess(userId))\n                }\n                dispatch(toggleFollowingProgress(false, userId));\n            })\n    }\n}\n\nexport const unfollow = (userId) => {\n    return (dispatch) => {\n        dispatch(toggleFollowingProgress(true, userId));\n        usersAPI.unfollow(userId)\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    dispatch(unfollowSuccess(userId))\n                }\n                dispatch(toggleFollowingProgress(false, userId));\n\n            })\n    }\n}\n\nexport default usersReducer;"]},"metadata":{},"sourceType":"module"}