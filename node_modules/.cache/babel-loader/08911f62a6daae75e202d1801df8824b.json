{"ast":null,"code":"const ADD_POST = 'ADD-POST';\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\nconst UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT';\nconst SEND_MESSAGE = 'SEND-MESSAGE';\nlet store = {\n  _state: {\n    profilePage: {\n      postsData: [{\n        id: 1,\n        message: 'Hi, how are you?',\n        likesCount: 15\n      }, {\n        id: 2,\n        message: 'This is my second post',\n        likesCount: 23\n      }, {\n        id: 3,\n        message: 'Hi everyone!',\n        likesCount: 67\n      }],\n      newPostText: ''\n    },\n    messagePage: {\n      dialogsData: [{\n        id: 1,\n        name: 'Dima'\n      }, {\n        id: 2,\n        name: 'Andrey'\n      }, {\n        id: 3,\n        name: 'Sveta'\n      }, {\n        id: 4,\n        name: 'Anna'\n      }, {\n        id: 5,\n        name: 'Petro'\n      }],\n      messageData: [{\n        id: 1,\n        message: 'hi'\n      }, {\n        id: 2,\n        message: 'yo'\n      }, {\n        id: 3,\n        message: 'How are you?'\n      }, {\n        id: 4,\n        message: 'Do you know me?'\n      }, {\n        id: 5,\n        message: 'By by'\n      }],\n      newMessageBody: ''\n    }\n  },\n\n  _callSubscriber() {\n    console.log(\"State changed\");\n  },\n\n  getState() {\n    return this._state;\n  },\n\n  subscribe(observer) {\n    this._callSubscriber = observer; // патерн observer\n  },\n\n  // або через приват методи визиваючи їх в dispatch\n  dispatch(action) {\n    debugger;\n\n    if (action.type === ADD_POST) {\n      let newPost = {\n        id: 5,\n        message: this._state.profilePage.newPostText,\n        likesCount: 0\n      };\n\n      this._state.profilePage.postsData.unshift(newPost);\n\n      this._state.profilePage.newPostText = '';\n\n      this._callSubscriber(this._state);\n    } else if (action.type === UPDATE_NEW_POST_TEXT) {\n      this._state.profilePage.newPostText = action.newText;\n\n      this._callSubscriber(this._state);\n    } else if (action.type === UPDATE_NEW_MESSAGE_TEXT) {\n      this._state.messagePage.newMessageBody = action.body;\n\n      this._callSubscriber(this._state);\n    } else if (action.type === SEND_MESSAGE) {\n      let body = this._state.messagePage.newMessageBody;\n      this._state.messagePage.newMessageBody = '';\n\n      this._state.messagePage.messageData.push({\n        id: 6,\n        message: body\n      });\n\n      this._callSubscriber(this._state);\n    } else {\n      console.log('missing despatch');\n    }\n  }\n\n};\nexport const sendMessageCreator = () => {\n  return {\n    type: SEND_MESSAGE\n  };\n};\nexport const updateNewMessageBodyCreator = body => {\n  return {\n    type: UPDATE_NEW_MESSAGE_TEXT,\n    body: body\n  };\n}; // export const addPostActionCreator =() => ({type:ADD_POST})\n// or\n\nexport const addPostActionCreator = () => {\n  return {\n    type: ADD_POST\n  };\n};\nexport const updateNewPostTextActionCreator = text => {\n  return {\n    type: UPDATE_NEW_POST_TEXT,\n    newText: text\n  };\n};\nexport default store;","map":{"version":3,"sources":["/Users/zheka/Desktop/projects/react-1/src/redux/state.js"],"names":["ADD_POST","UPDATE_NEW_POST_TEXT","UPDATE_NEW_MESSAGE_TEXT","SEND_MESSAGE","store","_state","profilePage","postsData","id","message","likesCount","newPostText","messagePage","dialogsData","name","messageData","newMessageBody","_callSubscriber","console","log","getState","subscribe","observer","dispatch","action","type","newPost","unshift","newText","body","push","sendMessageCreator","updateNewMessageBodyCreator","addPostActionCreator","updateNewPostTextActionCreator","text"],"mappings":"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","sourcesContent":["const ADD_POST = 'ADD-POST';\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\n\nconst UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT'\nconst SEND_MESSAGE = 'SEND-MESSAGE'\n\nlet store = {\n    _state: {\n        profilePage: {\n            postsData: [\n                {id: 1, message: 'Hi, how are you?', likesCount: 15},\n                {id: 2, message: 'This is my second post', likesCount: 23},\n                {id: 3, message: 'Hi everyone!', likesCount: 67}],\n            newPostText: ''\n        },\n        messagePage: {\n            dialogsData: [\n                {id: 1, name: 'Dima'},\n                {id: 2, name: 'Andrey'},\n                {id: 3, name: 'Sveta'},\n                {id: 4, name: 'Anna'},\n                {id: 5, name: 'Petro'}],\n            messageData: [\n                {id: 1, message: 'hi'},\n                {id: 2, message: 'yo'},\n                {id: 3, message: 'How are you?'},\n                {id: 4, message: 'Do you know me?'},\n                {id: 5, message: 'By by'}],\n            newMessageBody:''\n        }\n    },\n    _callSubscriber() {\n        console.log(\"State changed\");\n    },\n    getState() {\n        return this._state;\n    },\n    subscribe(observer) {\n        this._callSubscriber = observer;// патерн observer\n    },\n\n    // або через приват методи визиваючи їх в dispatch\n\n    dispatch(action) {\n        debugger;\n        if (action.type === ADD_POST) {\n            let newPost = {\n                id: 5,\n                message: this._state.profilePage.newPostText,\n                likesCount: 0\n            };\n            this._state.profilePage.postsData.unshift(newPost);\n            this._state.profilePage.newPostText = '';\n            this._callSubscriber(this._state);\n        } else if (action.type === UPDATE_NEW_POST_TEXT) {\n            this._state.profilePage.newPostText = action.newText;\n            this._callSubscriber(this._state)\n        }\n        else if(action.type === UPDATE_NEW_MESSAGE_TEXT){\n            this._state.messagePage.newMessageBody = action.body\n            this._callSubscriber(this._state)\n\n        }else if(action.type === SEND_MESSAGE){\n            let body = this._state.messagePage.newMessageBody\n            this._state.messagePage.newMessageBody = ''\n            this._state.messagePage.messageData.push({id:6,message:body})\n            this._callSubscriber(this._state)\n\n        }\n        else {\n            console.log('missing despatch')\n        }\n\n\n\n    }\n}\n\nexport const sendMessageCreator = () => {\n    return{\n        type: SEND_MESSAGE\n    }\n}\nexport const updateNewMessageBodyCreator = (body) =>{\n    return{\n        type:UPDATE_NEW_MESSAGE_TEXT,\n        body:body\n    }\n}\n\n// export const addPostActionCreator =() => ({type:ADD_POST})\n// or\n\nexport const addPostActionCreator = () => {\n    return {\n        type: ADD_POST\n    }\n}\n\n\nexport const updateNewPostTextActionCreator = (text) => {\n    return {\n        type: UPDATE_NEW_POST_TEXT,\n        newText: text\n    }\n}\n\n\nexport default store;"]},"metadata":{},"sourceType":"module"}